From 4aedf3727879be2532a183b416435a2e468616fd Mon Sep 17 00:00:00 2001
From: Tim Niemueller <niemueller@kbsg.rwth-aachen.de>
Date: Wed, 18 Mar 2015 14:17:04 +0100
Subject: [PATCH 1/7] webview-refbox: show game report stats from database

Query the llsf-refbox database for stats about played games.
---
 src/plugins/webview-refbox/Makefile                |  53 ++++++
 .../webview-refbox/webview-refbox-plugin.cpp       |  45 +++++
 .../webview-refbox/webview-refbox-processor.cpp    | 199 +++++++++++++++++++++
 .../webview-refbox/webview-refbox-processor.h      |  51 ++++++
 .../webview-refbox/webview-refbox-thread.cpp       |  77 ++++++++
 src/plugins/webview-refbox/webview-refbox-thread.h |  57 ++++++
 6 files changed, 482 insertions(+)
 create mode 100644 src/plugins/webview-refbox/Makefile
 create mode 100644 src/plugins/webview-refbox/webview-refbox-plugin.cpp
 create mode 100644 src/plugins/webview-refbox/webview-refbox-processor.cpp
 create mode 100644 src/plugins/webview-refbox/webview-refbox-processor.h
 create mode 100644 src/plugins/webview-refbox/webview-refbox-thread.cpp
 create mode 100644 src/plugins/webview-refbox/webview-refbox-thread.h

diff --git a/src/plugins/webview-refbox/Makefile b/src/plugins/webview-refbox/Makefile
new file mode 100644
index 0000000..b1ab2e4
--- /dev/null
+++ b/src/plugins/webview-refbox/Makefile
@@ -0,0 +1,53 @@
+#*****************************************************************************
+#          Makefile Build System for Fawkes: Webview for refbox logs
+#                            -------------------
+#   Created on Tue Mar 17 17:45:45 2015
+#   Copyright (C) 2006-2014 by Tim Niemueller, AllemaniACs RoboCup Team
+#
+#*****************************************************************************
+#
+#   This program is free software; you can redistribute it and/or modify
+#   it under the terms of the GNU General Public License as published by
+#   the Free Software Foundation; either version 2 of the License, or
+#   (at your option) any later version.
+#
+#*****************************************************************************
+
+BASEDIR = ../../..
+include $(BASEDIR)/etc/buildsys/config.mk
+include $(FAWKES_BASEDIR)/src/plugins/mongodb/mongodb.mk
+include $(BUILDCONFDIR)/webview/webview.mk
+
+CFLAGS += $(CFLAGS_CPP11)
+
+LIBS_webview_refbox = fawkescore fawkesutils fawkesaspects fawkeswebview \
+		      fawkesmongodbaspect
+OBJS_webview_refbox = webview-refbox-thread.o webview-refbox-processor.o \
+		      webview-refbox-plugin.o
+
+OBJS_all = $(OBJS_webview_refbox)
+
+ifeq ($(HAVE_WEBVIEW)$(HAVE_MONGODB),11)
+  CFLAGS  += $(CFLAGS_WEBVIEW)  $(CFLAGS_MONGODB)
+  LDFLAGS += $(LDFLAGS_WEBVIEW) $(LDFLAGS_MONGODB)
+
+  PLUGINS_all = $(PLUGINDIR)/webview-refbox.$(SOEXT)
+else
+  ifneq ($(HAVE_WEBVIEW),1)
+    WARN_TARGETS += warning_webview
+  endif
+  ifneq ($(HAVE_MONGODB),1)
+    WARN_TARGETS += warning_mongodb
+  endif
+endif
+
+ifeq ($(OBJSSUBMAKE),1)
+all: $(WARN_TARGETS)
+.PHONY: warning_webview warning_mongodb
+warning_webview:
+	$(SILENT)echo -e "$(INDENT_PRINT)--> $(TRED)Cannot build webview-refbox plugin$(TNORMAL) (webview not available)"
+warning_mongodb:
+	$(SILENT)echo -e "$(INDENT_PRINT)--> $(TRED)Cannot build webview-refbox plugin$(TNORMAL) (MongoDB support not available)"
+endif
+
+include $(BUILDSYSDIR)/base.mk
diff --git a/src/plugins/webview-refbox/webview-refbox-plugin.cpp b/src/plugins/webview-refbox/webview-refbox-plugin.cpp
new file mode 100644
index 0000000..bb59041
--- /dev/null
+++ b/src/plugins/webview-refbox/webview-refbox-plugin.cpp
@@ -0,0 +1,45 @@
+
+/***************************************************************************
+ *  webview-refbox-plugin.cpp - RCLL refbox log visualization
+ *
+ *  Created: Tue Mar 17 17:50:21 2015
+ *  Copyright  2015  Tim Niemueller [www.niemueller.de]
+ *
+ ****************************************************************************/
+
+/*  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2 of the License, or
+ *  (at your option) any later version.
+ *
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU Library General Public License for more details.
+ *
+ *  Read the full text in the LICENSE.GPL file in the doc directory.
+ */
+
+#include "webview-refbox-thread.h"
+#include <core/plugin.h>
+
+using namespace fawkes;
+
+/** RCLL refbox webview plugin.
+ * @author Tim Niemueller
+ */
+class WebviewRCLLRefBoxPlugin : public fawkes::Plugin
+{
+ public:
+  /** Constructor.
+   * @param config Fawkes configuration
+   */
+  WebviewRCLLRefBoxPlugin(Configuration *config) : Plugin(config)
+  {
+    thread_list.push_back(new WebviewRCLLRefBoxThread());
+  }
+};
+
+
+PLUGIN_DESCRIPTION("RCLL refbox log data")
+EXPORT_PLUGIN(WebviewRCLLRefBoxPlugin)
diff --git a/src/plugins/webview-refbox/webview-refbox-processor.cpp b/src/plugins/webview-refbox/webview-refbox-processor.cpp
new file mode 100644
index 0000000..4321470
--- /dev/null
+++ b/src/plugins/webview-refbox/webview-refbox-processor.cpp
@@ -0,0 +1,199 @@
+
+/***************************************************************************
+ *  webview-refbox-processor.cpp - RCLL refbox webview
+ *
+ *  Created: Tue Mar 17 18:00:29 2015
+ *  Copyright  2015  Tim Niemueller [www.niemueller.de]
+ ****************************************************************************/
+
+/*  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2 of the License, or
+ *  (at your option) any later version.
+ *
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU Library General Public License for more details.
+ *
+ *  Read the full text in the LICENSE.GPL file in the doc directory.
+ */
+
+#include "webview-refbox-processor.h"
+
+#include <core/exception.h>
+#include <core/threading/mutex_locker.h>
+#include <webview/page_reply.h>
+#include <webview/error_reply.h>
+#include <webview/redirect_reply.h>
+
+#include <mongo/client/dbclient.h>
+
+#include <cstring>
+#include <memory>
+
+using namespace fawkes;
+using namespace mongo;
+
+/** @class WebviewRCLLRefBoxRequestProcessor "webview-refbox-processor.h"
+ * Pan/tilt/zoom camera request processor.
+ * @author Tim Niemueller
+ */
+
+
+/** Constructor.
+ * @param base_url base URL of the webview PTZ cam web request processor.
+ * @param image_id Shared memory image buffer ID for viewing
+ * @param pantilt_id PanTiltInterface ID
+ * @param camctrl_id CameraControlInterface ID
+ * @param power_id SwitchInterface ID for powering PTU
+ * @param camera_id SwitchInterface ID for enabling/disabling image retrieval
+ * @param pan_increment value by which to increment pan value on request
+ * @param tilt_increment value by which to increment tilt value on request
+ * @param zoom_increment value by which to increment zoom value on request
+ * @param post_powerup_time time in seconds by which to delay reponse when
+ * turning on PTU and camera after inactivity
+ * @param presets pan/tilt preset values
+ * @param blackboard blackboard to open interfaces 
+ * @param logger logger to report problems
+ */
+WebviewRCLLRefBoxRequestProcessor::WebviewRCLLRefBoxRequestProcessor
+  (std::string base_url, mongo::DBClientBase *mongodb_client)
+{
+  mongodb_ = mongodb_client;
+}
+
+
+/** Destructor. */
+WebviewRCLLRefBoxRequestProcessor::~WebviewRCLLRefBoxRequestProcessor()
+{
+}
+
+
+WebReply *
+WebviewRCLLRefBoxRequestProcessor::process_request(const fawkes::WebRequest *request)
+{
+  if ( request->url().find(baseurl_) == 0 ) {
+    std::string subpath = request->url().substr(baseurl_.length());
+
+    WebPageReply *r = new WebPageReply("RCLL RefBox");
+
+    *r += "<h2>RCLL RefBox Database Report</h2>\n";
+
+    time_t query_time = time(0);
+    query_time -= 24 * 60;
+
+    BSONObj query = BSON("start-time" << BSONObjBuilder().appendTimeT("$gt", query_time).obj());
+
+    // check if there is a running game
+    std::shared_ptr<DBClientCursor> cursor =
+      mongodb_->query("llsfrb.game_report", Query(query).sort("start-time", -1), 1);
+
+    if (cursor->more()) {
+      BSONObj doc = cursor->next();
+      std::vector<BSONElement> teams  = doc["teams"].Array();
+      std::vector<BSONElement> points = doc["total-points"].Array();
+      r->append_body("<h3>Active Game %s vs. %s</h3>\n",
+		     teams[0].String().c_str(), teams[1].String().c_str());
+
+      *r += "<table>\n";
+      r->append_body("<tr><td><b>Started at:</b></td>\n"
+		     "<td>%s</td></tr>\n", doc["start-time"].Date().toString().c_str());
+      r->append_body("<tr><td><b>Points:</b></td>\n"
+		     "<td style=\"background-color: #aaaaaa\"><span style=\"color: #00ffff\">%u</span> "
+		     ": <span style=\"color: #ff00ff\">%u</span></td></tr>\n",
+		     points[0].Long(), points[1].Long());
+
+      r->append_body("<tr><td><b>Points Cyan:</b></td>\n"
+		     "<td><i>Exploration:</i> %ld</td></tr>\n",
+		     doc["phase-points-cyan"]["EXPLORATION"].Long());
+      r->append_body("<tr><td></td>\n"
+		     "<td><i>Production:</i> %ld</td></tr>\n",
+		     doc["phase-points-cyan"]["PRODUCTION"].Long());
+
+      r->append_body("<tr><td><b>Points Magenta:</b></td>\n"
+		     "<td><i>Exploration:</i> %ld</td></tr>\n",
+		     doc["phase-points-magenta"]["EXPLORATION"].Long());
+      r->append_body("<tr><td></td>\n"
+		     "<td><i>Production:</i> %ld</td></tr>\n",
+		     doc["phase-points-magenta"]["PRODUCTION"].Long());
+
+      *r += "</table>\n";
+    }
+
+    *r += "<h3>Previous Games</h3>\n";
+
+    // check if there is a running game
+    cursor =
+      mongodb_->query("llsfrb.game_report", QUERY("end-time" << BSON("$exists" << true)).sort("start-time"));
+
+    *r +=
+      "<table>\n"
+      "<tr><th>Teams</th><th>Points</th><th colspan=\"2\">Points Cyan</th>"
+      "<th colspan=\"2\">Points Magenta</th></tr>\n";
+
+    std::map<std::string, unsigned int> games_won;
+
+    while (cursor->more()) {
+      BSONObj doc = cursor->next();
+      std::vector<BSONElement> teams  = doc["teams"].Array();
+      std::vector<BSONElement> points = doc["total-points"].Array();
+
+      int winner_team = -1;
+      if (points[0].Long() > points[1].Long()) {
+	winner_team = 0;
+      } else if (points[1].Long() > points[0].Long()) {
+	winner_team = 1;
+      } // else draw
+
+      if (winner_team >= 0) {
+	if (games_won.find(teams[winner_team].String()) != games_won.end()) {
+	  games_won[teams[winner_team].String()] += 1;
+	} else {
+	  games_won[teams[winner_team].String()]  = 1;
+	}
+      }
+
+      r->append_body("<tr><td><b>%s vs. %s</b></td>\n",
+		     teams[0].String().c_str(), teams[1].String().c_str());
+
+      r->append_body("<td style=\"background-color: #aaaaaa\"><span style=\"color: #00ffff\">%u</span> "
+		     ": <span style=\"color: #ff00ff\">%u</span></td>\n",
+		     points[0].Long(), points[1].Long());
+
+      r->append_body("<td><i>Exploration:</i> %ld</td>\n",
+		     doc["phase-points-cyan"]["EXPLORATION"].Long());
+      r->append_body("<td><i>Production:</i> %ld</td>\n",
+		     doc["phase-points-cyan"]["PRODUCTION"].Long());
+
+      r->append_body("<td><i>Exploration:</i> %ld</td>\n",
+		     doc["phase-points-magenta"]["EXPLORATION"].Long());
+      r->append_body("<td><i>Production:</i> %ld</td>\n",
+		     doc["phase-points-magenta"]["PRODUCTION"].Long());
+
+      *r += "</tr>\n";
+
+    }
+
+    *r += "</table>\n";
+
+    *r +=
+      "<h4>Tournament Statistics</h4>\n"
+      "<table>\n"
+      "<tr><th>Team</th><th>Wins</th></tr>\n";
+    for (const auto &g : games_won) {
+      r->append_body("<tr><td><i>%s</i></td><td>%u</td></tr>\n",
+		     g.first.c_str(), g.second);
+    }
+    *r += "</table>\n";
+
+    return r;
+    /*
+    } else {
+      return new WebErrorPageReply(WebReply::HTTP_NOT_FOUND, "Unknown request");
+    }
+    */
+  } else {
+    return NULL;
+  }
+}
diff --git a/src/plugins/webview-refbox/webview-refbox-processor.h b/src/plugins/webview-refbox/webview-refbox-processor.h
new file mode 100644
index 0000000..e325956
--- /dev/null
+++ b/src/plugins/webview-refbox/webview-refbox-processor.h
@@ -0,0 +1,51 @@
+
+/***************************************************************************
+ *  webview-refbox-processor.h - RCLL refbox webview
+ *
+ *  Created: Tue Mar 17 17:56:18 2015
+ *  Copyright  2015  Tim Niemueller [www.niemueller.de]
+ ****************************************************************************/
+
+/*  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2 of the License, or
+ *  (at your option) any later version.
+ *
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU Library General Public License for more details.
+ *
+ *  Read the full text in the LICENSE.GPL file in the doc directory.
+ */
+
+#ifndef __PLUGINS_WEBVIEW_REFBOX_WEBVIEW_REFBOX_PROCESSOR_H_
+#define __PLUGINS_WEBVIEW_REFBOX_WEBVIEW_REFBOX_PROCESSOR_H_
+
+#include <webview/request_processor.h>
+
+#include <string>
+#include <tuple>
+#include <map>
+
+namespace mongo {
+  class DBClientBase;
+}
+
+class WebviewRCLLRefBoxRequestProcessor : public fawkes::WebRequestProcessor
+{
+ public:
+  WebviewRCLLRefBoxRequestProcessor(std::string base_url, mongo::DBClientBase *mongodb_client);
+  virtual ~WebviewRCLLRefBoxRequestProcessor();
+
+  virtual fawkes::WebReply * process_request(const fawkes::WebRequest *request);
+
+ private:
+
+ private:
+  mongo::DBClientBase *mongodb_;
+
+  std::string           baseurl_;
+};
+
+#endif
diff --git a/src/plugins/webview-refbox/webview-refbox-thread.cpp b/src/plugins/webview-refbox/webview-refbox-thread.cpp
new file mode 100644
index 0000000..c7a1287
--- /dev/null
+++ b/src/plugins/webview-refbox/webview-refbox-thread.cpp
@@ -0,0 +1,77 @@
+
+/***************************************************************************
+ *  webview-refbox-thread.cpp - RCLL refbox webview
+ *
+ *  Created: Tue Mar 17 17:53:14 2015
+ *  Copyright  2015  Tim Niemueller [www.niemueller.de]
+ ****************************************************************************/
+
+/*  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2 of the License, or
+ *  (at your option) any later version.
+ *
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU Library General Public License for more details.
+ *
+ *  Read the full text in the LICENSE.GPL file in the doc directory.
+ */
+
+#include "webview-refbox-thread.h"
+#include "webview-refbox-processor.h"
+
+#include <webview/url_manager.h>
+#include <webview/nav_manager.h>
+#include <webview/request_manager.h>
+
+using namespace fawkes;
+
+#define REFBOX_URL_PREFIX "/refbox"
+
+/** @class WebviewRCLLRefBoxThread "webview-refbox-thread.h"
+ * Show refbox log data via webview.
+ * @author Tim Niemueller
+ */
+
+/** Constructor. */
+WebviewRCLLRefBoxThread::WebviewRCLLRefBoxThread()
+  : Thread("WebviewRCLLRefBoxThread", Thread::OPMODE_WAITFORWAKEUP)
+{
+}
+
+
+/** Destructor. */
+WebviewRCLLRefBoxThread::~WebviewRCLLRefBoxThread()
+{
+}
+
+
+void
+WebviewRCLLRefBoxThread::init()
+{
+  std::string nav_entry = "RCLL RefBox";
+  try {
+    nav_entry = config->get_string("/webview/refbox/nav-entry");
+  } catch (Exception &e) {} // ignored, use default
+
+  web_proc_  = new WebviewRCLLRefBoxRequestProcessor(REFBOX_URL_PREFIX, mongodb_client);
+  webview_url_manager->register_baseurl(REFBOX_URL_PREFIX, web_proc_);
+  webview_nav_manager->add_nav_entry(REFBOX_URL_PREFIX, nav_entry.c_str());
+}
+
+
+void
+WebviewRCLLRefBoxThread::finalize()
+{
+  webview_url_manager->unregister_baseurl(REFBOX_URL_PREFIX);
+  webview_nav_manager->remove_nav_entry(REFBOX_URL_PREFIX);
+  delete web_proc_;
+}
+
+
+void
+WebviewRCLLRefBoxThread::loop()
+{
+}
diff --git a/src/plugins/webview-refbox/webview-refbox-thread.h b/src/plugins/webview-refbox/webview-refbox-thread.h
new file mode 100644
index 0000000..5f91a32
--- /dev/null
+++ b/src/plugins/webview-refbox/webview-refbox-thread.h
@@ -0,0 +1,57 @@
+
+/***************************************************************************
+ *  webview-refbox-thread.h - RCLL refbox webview
+ *
+ *  Created: Tue Mar 17 17:51:34 2015
+ *  Copyright  2015  Tim Niemueller [www.niemueller.de]
+ ****************************************************************************/
+
+/*  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2 of the License, or
+ *  (at your option) any later version.
+ *
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU Library General Public License for more details.
+ *
+ *  Read the full text in the LICENSE.GPL file in the doc directory.
+ */
+
+#ifndef __PLUGINS_WEBVIEW_REFBOX_WEBVIEW_REFBOX_THREAD_H_
+#define __PLUGINS_WEBVIEW_REFBOX_WEBVIEW_REFBOX_THREAD_H_
+
+#include <core/threading/thread.h>
+#include <aspect/logging.h>
+#include <aspect/clock.h>
+#include <aspect/webview.h>
+#include <aspect/configurable.h>
+#include <plugins/mongodb/aspect/mongodb.h>
+
+class WebviewRCLLRefBoxRequestProcessor;
+
+class WebviewRCLLRefBoxThread
+: public fawkes::Thread,
+  public fawkes::LoggingAspect,
+  public fawkes::ClockAspect,
+  public fawkes::ConfigurableAspect,
+  public fawkes::MongoDBAspect,
+  public fawkes::WebviewAspect
+{
+ public:
+  WebviewRCLLRefBoxThread();
+  virtual ~WebviewRCLLRefBoxThread();
+
+  virtual void init();
+  virtual void loop();
+  virtual void finalize();
+
+ /** Stub to see name in backtrace for easier debugging. @see Thread::run() */
+ protected: virtual void run() { Thread::run(); }
+
+ private:
+  WebviewRCLLRefBoxRequestProcessor *web_proc_;
+};
+
+#endif
-- 
1.9.3


From bc2dbc24b4e8ae4a7e6b14b913d066dd3de7f735 Mon Sep 17 00:00:00 2001
From: Tim Niemueller <niemueller@kbsg.rwth-aachen.de>
Date: Thu, 19 Mar 2015 12:08:44 +0100
Subject: [PATCH 2/7] webview-refbox: add more information about games in stats

---
 .../webview-refbox/webview-refbox-processor.cpp    | 106 +++++++++++++++++++--
 1 file changed, 99 insertions(+), 7 deletions(-)

diff --git a/src/plugins/webview-refbox/webview-refbox-processor.cpp b/src/plugins/webview-refbox/webview-refbox-processor.cpp
index 4321470..03d56a5 100644
--- a/src/plugins/webview-refbox/webview-refbox-processor.cpp
+++ b/src/plugins/webview-refbox/webview-refbox-processor.cpp
@@ -77,6 +77,16 @@ WebviewRCLLRefBoxRequestProcessor::process_request(const fawkes::WebRequest *req
     std::string subpath = request->url().substr(baseurl_.length());
 
     WebPageReply *r = new WebPageReply("RCLL RefBox");
+    r->set_html_header("  <link type=\"text/css\" href=\"/static/css/jqtheme/"
+		       "jquery-ui.custom.css\" rel=\"stylesheet\" />\n"
+		       "  <script type=\"text/javascript\" src=\"/static/js/"
+		       "jquery.min.js\"></script>\n"
+		       "  <script type=\"text/javascript\" src=\"/static/js/"
+		       "jquery-ui.custom.min.js\"></script>\n");
+    *r +=
+      "<style type=\"text/css\">\n"
+      "  .game-link { color: black; font-weight: bold; }\n"
+      "</style>";
 
     *r += "<h2>RCLL RefBox Database Report</h2>\n";
 
@@ -100,8 +110,8 @@ WebviewRCLLRefBoxRequestProcessor::process_request(const fawkes::WebRequest *req
       r->append_body("<tr><td><b>Started at:</b></td>\n"
 		     "<td>%s</td></tr>\n", doc["start-time"].Date().toString().c_str());
       r->append_body("<tr><td><b>Points:</b></td>\n"
-		     "<td style=\"background-color: #aaaaaa\"><span style=\"color: #00ffff\">%u</span> "
-		     ": <span style=\"color: #ff00ff\">%u</span></td></tr>\n",
+		     "<td><span style=\"background-color: #88ffff\">%u</span> "
+		     ": <span style=\"background-color: #ff88ff\">%u</span></td></tr>\n",
 		     points[0].Long(), points[1].Long());
 
       r->append_body("<tr><td><b>Points Cyan:</b></td>\n"
@@ -129,10 +139,11 @@ WebviewRCLLRefBoxRequestProcessor::process_request(const fawkes::WebRequest *req
 
     *r +=
       "<table>\n"
-      "<tr><th>Teams</th><th>Points</th><th colspan=\"2\">Points Cyan</th>"
+      "<tr><th>Teams</th><th colspan=\"2\">Points</th><th colspan=\"2\">Points Cyan</th>"
       "<th colspan=\"2\">Points Magenta</th></tr>\n";
 
     std::map<std::string, unsigned int> games_won;
+    std::list<std::string> reports;
 
     while (cursor->more()) {
       BSONObj doc = cursor->next();
@@ -154,11 +165,16 @@ WebviewRCLLRefBoxRequestProcessor::process_request(const fawkes::WebRequest *req
 	}
       }
 
-      r->append_body("<tr><td><b>%s vs. %s</b></td>\n",
+      reports.push_back(doc["_id"].OID().str());
+
+      r->append_body("<tr><td><a id=\"game-%s\" href=\"#\" class=\"game-link\">"
+		     "<img id=\"game-%s-icon\" class=\"game-icon\" src=\"/static/images/icon-triangle-e.png\" />"
+		     " %s vs. %s</a></td>\n",
+		     doc["_id"].OID().str().c_str(), doc["_id"].OID().str().c_str(),
 		     teams[0].String().c_str(), teams[1].String().c_str());
 
-      r->append_body("<td style=\"background-color: #aaaaaa\"><span style=\"color: #00ffff\">%u</span> "
-		     ": <span style=\"color: #ff00ff\">%u</span></td>\n",
+      r->append_body("<td style=\"background-color: #88ffff; text-align: center;\">%u</td>"
+		     "<td style=\"background-color: #ff88ff; text-align: center;\">%u</td>\n",
 		     points[0].Long(), points[1].Long());
 
       r->append_body("<td><i>Exploration:</i> %ld</td>\n",
@@ -173,11 +189,87 @@ WebviewRCLLRefBoxRequestProcessor::process_request(const fawkes::WebRequest *req
 
       *r += "</tr>\n";
 
-    }
+      r->append_body("<tr id=\"game-%s-desc\"><td valign=\"top\">Events</td><td colspan=\"6\">",
+		     doc["_id"].OID().str().c_str());
+      std::vector<BSONElement> pointinfo = doc["points"].Array();
+      for (const BSONElement &pd : pointinfo) {
+	r->append_body("<span style=\"background-color: #%s\">%s</span> scored %lu points at %.2f: %s<br/>\n",
+		       pd["team"].String() == "CYAN" ? "88ffff" : "ff88ff",
+		       pd["team"].String().c_str(), pd["points"].Long(),
+		       pd["game-time"].Double(), pd["reason"].String().c_str());
+      }
+      *r += "</td></tr>\n";
+
+      if (doc.hasField("orders")) {
+	r->append_body("<tr id=\"game-%s-orders\">"
+		       "<td valign=\"top\"><div style=\"margin-top: 12px\">Orders</div></td>"
+		       "<td colspan=\"6\"><table>"
+		       "<tr><th>ID</th><th>Team</th><th>Product</th>"
+		       "<th>Requested</th><th>Delivered</th><th>Period</th></tr>\n",
+		       doc["_id"].OID().str().c_str());
+	std::vector<BSONElement> orders = doc["orders"].Array();
+	for (const BSONElement &o : orders) {
+	  std::vector<BSONElement> del_period = o["delivery-period"].Array();
+	  r->append_body("<tr><td>%lu</td><td>%s</td><td>%s</td>"
+			 "<td>%lu</td><td>%lu</td><td>%lu-%lu (Act. %lu)</td></tr>",
+			 o["id"].Long(), o["team"].String().c_str(), o["product"].String().c_str(),
+			 o["quantity-requested"].Long(), o["quantity-delivered"].Long(),
+			 del_period[0].Long(), del_period[1].Long(), o["activate-at"].Long());
+	}
+	*r += "</table></td></tr>\n";
+      }
 
+      if (doc.hasField("machines")) {
+	r->append_body("<tr id=\"game-%s-machines\">"
+		       "<td valign=\"top\"><div style=\"margin-top: 12px\">Machines</div></td>"
+		       "<td colspan=\"6\"><table>"
+		       "<tr><th>Name</th><th>Type</th><th>Team</th>"
+		       "<th>Productions</th><th>Proc. Time</th></tr>\n",
+		       doc["_id"].OID().str().c_str());
+	std::vector<BSONElement> machines = doc["machines"].Array();
+	for (const BSONElement &m : machines) {
+	  r->append_body("<tr><td>%s</td><td>%s</td><td>%s</td>"
+			 "<td>%lu</td><td>%lu</td></tr>",
+			 m["name"].String().c_str(), m["type"].String().c_str(), m["team"].String().c_str(),
+			 m["productions"].Long(), m.Obj().hasField("proc-time") ? m["proc-time"].Long() : 0);
+	}
+	*r += "</table></td></tr>\n";
+      }
+
+    }
     *r += "</table>\n";
 
     *r +=
+      "<script type=\"text/javascript\">\n"
+      "  $(function(){\n";
+    for (const std::string &gr : reports) {
+      r->append_body
+	("    $(\"#game-%s\").click(function(){\n"
+	 "      if ( $(\"#game-%s-desc\").is(\":visible\") ) {\n"
+	 "        $(\"#game-%s-desc\").hide();\n"
+	 "        $(\"#game-%s-orders\").hide();\n"
+	 "        $(\"#game-%s-machines\").hide();\n"
+	 "        $(\"#game-%s-icon\").attr(\"src\", \"/static/images/icon-triangle-e.png\");\n"
+	 "      } else {\n"
+	 "        $(\"#game-%s-desc\").show();\n"
+	 "        $(\"#game-%s-orders\").show();\n"
+	 "        $(\"#game-%s-machines\").show();\n"
+	 "        $(\"#game-%s-icon\").attr(\"src\", \"/static/images/icon-triangle-s.png\");\n"
+	 "      }\n"
+	 "    });\n"
+	 "    $(\"#game-%s-desc\").hide();\n"
+	 "    $(\"#game-%s-orders\").hide();\n"
+	 "    $(\"#game-%s-machines\").hide();\n",
+	 gr.c_str(), gr.c_str(), gr.c_str(), gr.c_str(), gr.c_str(),
+	 gr.c_str(), gr.c_str(), gr.c_str(), gr.c_str(), gr.c_str(),
+	 gr.c_str(), gr.c_str(), gr.c_str());
+	}
+    *r +=
+      "  });\n"
+      "</script>\n";
+
+
+    *r +=
       "<h4>Tournament Statistics</h4>\n"
       "<table>\n"
       "<tr><th>Team</th><th>Wins</th></tr>\n";
-- 
1.9.3


From 3fb0ab22579ceab43b4c9953502a42fa2b9a8570 Mon Sep 17 00:00:00 2001
From: Tim Niemueller <niemueller@kbsg.rwth-aachen.de>
Date: Thu, 19 Mar 2015 14:24:09 +0100
Subject: [PATCH 3/7] webview-refbox: further improve output and add start and
 end times

---
 .../webview-refbox/webview-refbox-processor.cpp    | 22 ++++++++++++++++++----
 1 file changed, 18 insertions(+), 4 deletions(-)

diff --git a/src/plugins/webview-refbox/webview-refbox-processor.cpp b/src/plugins/webview-refbox/webview-refbox-processor.cpp
index 03d56a5..0e09da1 100644
--- a/src/plugins/webview-refbox/webview-refbox-processor.cpp
+++ b/src/plugins/webview-refbox/webview-refbox-processor.cpp
@@ -189,16 +189,27 @@ WebviewRCLLRefBoxRequestProcessor::process_request(const fawkes::WebRequest *req
 
       *r += "</tr>\n";
 
-      r->append_body("<tr id=\"game-%s-desc\"><td valign=\"top\">Events</td><td colspan=\"6\">",
+      r->append_body("<tr id=\"game-%s-time\">"
+		     "<td valign=\"top\">Game Time</td>"
+		     "<td colspan=\"6\">"
+		     "%s to %s</td></tr>\n",
+		     doc["_id"].OID().str().c_str(),
+		     doc["start-time"].Date().toString().c_str(),
+		     doc["end-time"].Date().toString().c_str());
+
+      r->append_body("<tr id=\"game-%s-desc\">"
+		     "<td valign=\"top\"><div style=\"margin-top: 12px\">Events</div></td>"
+		     "<td colspan=\"6\"><table>"
+		     "<tr><th>Team</th><th>Points</th><th>Game Time</th><th>Reason</th></tr>\n",
 		     doc["_id"].OID().str().c_str());
       std::vector<BSONElement> pointinfo = doc["points"].Array();
       for (const BSONElement &pd : pointinfo) {
-	r->append_body("<span style=\"background-color: #%s\">%s</span> scored %lu points at %.2f: %s<br/>\n",
+	r->append_body("<tr><td style=\"background-color: #%s\">%s</td><td>%lu</td><td>%.2f</td><td>%s</td></tr>\n",
 		       pd["team"].String() == "CYAN" ? "88ffff" : "ff88ff",
 		       pd["team"].String().c_str(), pd["points"].Long(),
 		       pd["game-time"].Double(), pd["reason"].String().c_str());
       }
-      *r += "</td></tr>\n";
+      *r += "</table></td></tr>\n";
 
       if (doc.hasField("orders")) {
 	r->append_body("<tr id=\"game-%s-orders\">"
@@ -246,23 +257,26 @@ WebviewRCLLRefBoxRequestProcessor::process_request(const fawkes::WebRequest *req
       r->append_body
 	("    $(\"#game-%s\").click(function(){\n"
 	 "      if ( $(\"#game-%s-desc\").is(\":visible\") ) {\n"
+	 "        $(\"#game-%s-time\").hide();\n"
 	 "        $(\"#game-%s-desc\").hide();\n"
 	 "        $(\"#game-%s-orders\").hide();\n"
 	 "        $(\"#game-%s-machines\").hide();\n"
 	 "        $(\"#game-%s-icon\").attr(\"src\", \"/static/images/icon-triangle-e.png\");\n"
 	 "      } else {\n"
+	 "        $(\"#game-%s-time\").show();\n"
 	 "        $(\"#game-%s-desc\").show();\n"
 	 "        $(\"#game-%s-orders\").show();\n"
 	 "        $(\"#game-%s-machines\").show();\n"
 	 "        $(\"#game-%s-icon\").attr(\"src\", \"/static/images/icon-triangle-s.png\");\n"
 	 "      }\n"
 	 "    });\n"
+	 "    $(\"#game-%s-time\").hide();\n"
 	 "    $(\"#game-%s-desc\").hide();\n"
 	 "    $(\"#game-%s-orders\").hide();\n"
 	 "    $(\"#game-%s-machines\").hide();\n",
 	 gr.c_str(), gr.c_str(), gr.c_str(), gr.c_str(), gr.c_str(),
 	 gr.c_str(), gr.c_str(), gr.c_str(), gr.c_str(), gr.c_str(),
-	 gr.c_str(), gr.c_str(), gr.c_str());
+	 gr.c_str(), gr.c_str(), gr.c_str(), gr.c_str(), gr.c_str(), gr.c_str());
 	}
     *r +=
       "  });\n"
-- 
1.9.3


From 473053b6ed375ae3ad39f86271caba862d995852 Mon Sep 17 00:00:00 2001
From: Tim Niemueller <niemueller@kbsg.rwth-aachen.de>
Date: Fri, 20 Mar 2015 14:03:51 +0100
Subject: [PATCH 4/7] webview-refbox: map reduce query for tournament stats

Gather some more tournament statistics. Rather than polluting the C++
code use MongoDB and map-reduce to gather the data. Mark which team won
per line.
---
 .../webview-refbox/webview-refbox-processor.cpp    | 104 +++++++++++++++++----
 1 file changed, 88 insertions(+), 16 deletions(-)

diff --git a/src/plugins/webview-refbox/webview-refbox-processor.cpp b/src/plugins/webview-refbox/webview-refbox-processor.cpp
index 0e09da1..c570c1f 100644
--- a/src/plugins/webview-refbox/webview-refbox-processor.cpp
+++ b/src/plugins/webview-refbox/webview-refbox-processor.cpp
@@ -85,7 +85,7 @@ WebviewRCLLRefBoxRequestProcessor::process_request(const fawkes::WebRequest *req
 		       "jquery-ui.custom.min.js\"></script>\n");
     *r +=
       "<style type=\"text/css\">\n"
-      "  .game-link { color: black; font-weight: bold; }\n"
+      "  .game-link { color: black; }\n"
       "</style>";
 
     *r += "<h2>RCLL RefBox Database Report</h2>\n";
@@ -142,7 +142,6 @@ WebviewRCLLRefBoxRequestProcessor::process_request(const fawkes::WebRequest *req
       "<tr><th>Teams</th><th colspan=\"2\">Points</th><th colspan=\"2\">Points Cyan</th>"
       "<th colspan=\"2\">Points Magenta</th></tr>\n";
 
-    std::map<std::string, unsigned int> games_won;
     std::list<std::string> reports;
 
     while (cursor->more()) {
@@ -157,21 +156,14 @@ WebviewRCLLRefBoxRequestProcessor::process_request(const fawkes::WebRequest *req
 	winner_team = 1;
       } // else draw
 
-      if (winner_team >= 0) {
-	if (games_won.find(teams[winner_team].String()) != games_won.end()) {
-	  games_won[teams[winner_team].String()] += 1;
-	} else {
-	  games_won[teams[winner_team].String()]  = 1;
-	}
-      }
-
       reports.push_back(doc["_id"].OID().str());
 
       r->append_body("<tr><td><a id=\"game-%s\" href=\"#\" class=\"game-link\">"
 		     "<img id=\"game-%s-icon\" class=\"game-icon\" src=\"/static/images/icon-triangle-e.png\" />"
-		     " %s vs. %s</a></td>\n",
+		     " %s%s%s vs. %s%s%s</a></td>\n",
 		     doc["_id"].OID().str().c_str(), doc["_id"].OID().str().c_str(),
-		     teams[0].String().c_str(), teams[1].String().c_str());
+		     winner_team == 0 ? "<b>" : "", teams[0].String().c_str(), winner_team == 0 ? "</b>" : "",
+		     winner_team == 1 ? "<b>" : "", teams[1].String().c_str(), winner_team == 1 ? "</b>" : "");
 
       r->append_body("<td style=\"background-color: #88ffff; text-align: center;\">%u</td>"
 		     "<td style=\"background-color: #ff88ff; text-align: center;\">%u</td>\n",
@@ -282,14 +274,94 @@ WebviewRCLLRefBoxRequestProcessor::process_request(const fawkes::WebRequest *req
       "  });\n"
       "</script>\n";
 
+    // This set of function reduces to a collection with
+    // a separate document per team
+    const char *map_func =
+      "function () {\n"
+      "  if (this.teams[0] != \"\") {\n"
+      "    emit(this.teams[0], {points: this[\"total-points\"][0],\n"
+      "			        opp_points: this[\"total-points\"][1]});\n"
+      "  }\n"
+      "  if (this.teams[1] != \"\") {\n"
+      "    emit(this.teams[1], {points: this[\"total-points\"][1],\n"
+      "			 	opp_points: this[\"total-points\"][0]});\n"
+      "	 }\n"
+      "}";
+    const char *red_func =
+      "function(key, values) {\n"
+      "	 rv = { games: 0, wins: 0, points: 0, opp_points: 0 };\n"
+      "	 for (var i = 0; i < values.length; ++i) {\n"
+      "	   rv.games += (\"games\" in values[i]) ? values[i] : 1;\n"
+      "	   if (\"wins\" in values[i]) {\n"
+      "	     rv.wins += values[i].wins;\n"
+      "	   } else if (values[i].points > values[i].opp_points) {\n"
+      "	     rv.wins += 1;\n"
+      "	   }\n"
+      "	   rv.points += values[i].points;\n"
+      "	   rv.opp_points += values[i].opp_points;\n"
+      "	 }\n"
+      "	 return rv;\n"
+      "}\n";
+
+    /*
+    // these functions reduce into a single document for all teams
+    const char *map_func =
+      "function () {\n"
+      "  if (this.teams[0] != \"\") {\n"
+      "	   value = {teams: [this.teams[0]]}\n"
+      "	   value[this.teams[0]] = {points: this[\"total-points\"][0],\n"
+      "	 		           opp_points: this[\"total-points\"][1]}\n"
+      "    emit(\"stats\", value);\n"
+      "	 }\n"
+      "  if (this.teams[1] != \"\") {\n"
+      "	   value = {teams: [this.teams[1]]}\n"
+      "	   value[this.teams[1]] = {points: this[\"total-points\"][1],\n"
+      "	                           opp_points: this[\"total-points\"][0]}\n"
+      "    emit(\"stats\", value);\n"
+      "	 }\n"
+      "}\n";
+
+    const char *red_func =
+      "function(key, values) {\n"
+      "  rv = { teams: [] };\n"
+      "  for (var i = 0; i < values.length; ++i) {\n"
+      "	   for (var t = 0; t < values[i].teams.length; ++t) {\n"
+      "	     if (rv.teams.indexOf(values[i].teams[t]) == -1) {\n"
+      "	       rv.teams.push(values[i].teams[t])\n"
+      "	     }\n"
+      "	     if (! (values[i].teams[t] in rv)) {\n"
+      "	       rv[values[i].teams[t]] = { games: 0, wins: 0, points: 0, opp_points: 0 };\n"
+      "	     }\n"
+      "	     rv[values[i].teams[t]].games +=\n"
+      "	       (\"games\" in values[i][values[i].teams[t]]) ? values[i][values[i].teams[t]] : 1;\n"
+      "	     if (\"wins\" in values[i][values[i].teams[t]]) {\n"
+      "	       rv[values[i].teams[t]].wins += values[i][values[i].teams[t]].wins;\n"
+      "	     } else if (values[i].points > values[i][values[i].teams[t]].opp_points) {\n"
+      "	       rv[values[i].teams[t]].wins += 1;\n"
+      "	     }\n"
+      "	     rv[values[i].teams[t]].points += values[i][values[i].teams[t]].points;\n"
+      "	     rv[values[i].teams[t]].opp_points += values[i][values[i].teams[t]].opp_points;\n"
+      "	    }\n"
+      "	 }\n"
+      "	 return rv;\n"
+      "}\n";
+    */
+
+    BSONObj out = mongodb_->mapreduce("llsfrb.game_report", map_func, red_func,
+				      BSON("end-time" << BSON("$exists" << true)));
 
     *r +=
       "<h4>Tournament Statistics</h4>\n"
       "<table>\n"
-      "<tr><th>Team</th><th>Wins</th></tr>\n";
-    for (const auto &g : games_won) {
-      r->append_body("<tr><td><i>%s</i></td><td>%u</td></tr>\n",
-		     g.first.c_str(), g.second);
+      "<tr><th>Team</th><th>Games</th><th>Wins</th><th>Points</th></tr>\n";
+    std::vector<BSONElement> teams = out["results"].Array();
+    for (const BSONElement &t : teams) {
+      BSONObj tdoc = t["value"].Obj();
+      r->append_body("<tr><td><i>%s</i></td><td>%u</td><td>%u</td><td>%d:%d (%d)</td></tr>\n",
+		     t["_id"].String().c_str(), tdoc["games"].numberInt(), tdoc["wins"].numberInt(),
+		     tdoc["points"].numberInt(), tdoc["opp_points"].numberInt(),
+		     tdoc["points"].numberInt() - tdoc["opp_points"].numberInt());
+      
     }
     *r += "</table>\n";
 
-- 
1.9.3


From 1db9b5649e6e7c1540719e607fce3ec0515176f0 Mon Sep 17 00:00:00 2001
From: Tim Niemueller <niemueller@kbsg.rwth-aachen.de>
Date: Sat, 21 Mar 2015 00:34:27 +0100
Subject: [PATCH 5/7] webview-refbox: fix map-reduce query

---
 src/plugins/webview-refbox/webview-refbox-processor.cpp | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/src/plugins/webview-refbox/webview-refbox-processor.cpp b/src/plugins/webview-refbox/webview-refbox-processor.cpp
index c570c1f..b44034c 100644
--- a/src/plugins/webview-refbox/webview-refbox-processor.cpp
+++ b/src/plugins/webview-refbox/webview-refbox-processor.cpp
@@ -291,7 +291,7 @@ WebviewRCLLRefBoxRequestProcessor::process_request(const fawkes::WebRequest *req
       "function(key, values) {\n"
       "	 rv = { games: 0, wins: 0, points: 0, opp_points: 0 };\n"
       "	 for (var i = 0; i < values.length; ++i) {\n"
-      "	   rv.games += (\"games\" in values[i]) ? values[i] : 1;\n"
+      "	   rv.games += (\"games\" in values[i]) ? values[i].games : 1;\n"
       "	   if (\"wins\" in values[i]) {\n"
       "	     rv.wins += values[i].wins;\n"
       "	   } else if (values[i].points > values[i].opp_points) {\n"
@@ -333,7 +333,7 @@ WebviewRCLLRefBoxRequestProcessor::process_request(const fawkes::WebRequest *req
       "	       rv[values[i].teams[t]] = { games: 0, wins: 0, points: 0, opp_points: 0 };\n"
       "	     }\n"
       "	     rv[values[i].teams[t]].games +=\n"
-      "	       (\"games\" in values[i][values[i].teams[t]]) ? values[i][values[i].teams[t]] : 1;\n"
+      "	       (\"games\" in values[i][values[i].teams[t]]) ? values[i][values[i].teams[t]].games : 1;\n"
       "	     if (\"wins\" in values[i][values[i].teams[t]]) {\n"
       "	       rv[values[i].teams[t]].wins += values[i][values[i].teams[t]].wins;\n"
       "	     } else if (values[i].points > values[i][values[i].teams[t]].opp_points) {\n"
-- 
1.9.3


From 9ab199f7ffd3be69b9bdbeaadf848b69fe2a5b35 Mon Sep 17 00:00:00 2001
From: Tim Niemueller <niemueller@kbsg.rwth-aachen.de>
Date: Fri, 13 May 2016 14:38:26 +0200
Subject: [PATCH 6/7] webview-refbox: adapt to RCLL 2015 and beyond

Order/product display and quantity delivered has changed.
---
 .../webview-refbox/webview-refbox-processor.cpp    | 74 +++++++++++++++++-----
 .../webview-refbox/webview-refbox-processor.h      |  4 +-
 2 files changed, 60 insertions(+), 18 deletions(-)

diff --git a/src/plugins/webview-refbox/webview-refbox-processor.cpp b/src/plugins/webview-refbox/webview-refbox-processor.cpp
index b44034c..4f7384c 100644
--- a/src/plugins/webview-refbox/webview-refbox-processor.cpp
+++ b/src/plugins/webview-refbox/webview-refbox-processor.cpp
@@ -70,6 +70,54 @@ WebviewRCLLRefBoxRequestProcessor::~WebviewRCLLRefBoxRequestProcessor()
 }
 
 
+std::string
+WebviewRCLLRefBoxRequestProcessor::gen_orders_table(const mongo::BSONObj *doc)
+{
+	std::string rv =
+		"<table>"
+		"<tr><th>ID</th><th>Product</th>"
+		"<th>Requested</th><th>Delivered</th><th colspan=\"2\">Period</th></tr>\n";
+	
+	std::vector<BSONElement> orders = (*doc)["orders"].Array();
+	for (const BSONElement &o : orders) {
+		std::vector<BSONElement> del_period = o["delivery-period"].Array();
+		std::vector<BSONElement> quant_deliv = o["quantity-delivered"].Array();
+		std::string base_color = o["base-color"].String().substr(5);
+		std::transform(base_color.begin(), base_color.end(), base_color.begin(), ::tolower);
+		std::string cap_color = o["cap-color"].String().substr(4);
+		std::transform(cap_color.begin(), cap_color.end(), cap_color.begin(), ::tolower);
+		std::string prod_string =
+			std::string("<div>") +
+			"<div style=\"float: left; width: 8px; height:12px; background-color: " + base_color + "\"></div>";
+
+		if (o.Obj().hasField("ring-colors")) {
+			std::vector<BSONElement> rings = o["ring-colors"].Array();
+			for (const BSONElement &r : rings) {
+				const std::string ring_color = r.String().substr(5);
+				prod_string +=
+					"<div style=\"float: left; margin-left: 1px; "
+					"width: 6px; height:12px; background-color: " + ring_color + "\"></div>" +
+					"</div>";
+			}
+		}
+
+		prod_string +=
+			"<div style=\"float: left; margin-left: 1px; "
+			"width: 4px; height:12px; background-color: " + cap_color + "\"></div>" +
+			"</div>";
+		      
+		rv += "<tr><td>" + std::to_string(o["id"].Long()) + "</td><td>" + prod_string + "</td>" +
+			"<td>" + std::to_string(o["quantity-requested"].Long()) + "</td>"+
+			"<td><span style=\"color: #88ffff; weight: bold;\">" + std::to_string(quant_deliv[0].Long()) + "</span> / "
+			"<span style=\"color: #ff88ff; weight: bold;\">" + std::to_string(quant_deliv[1].Long()) + "</span></td>" +
+			"<td>" + std::to_string(del_period[0].Long()) + "-" + std::to_string(del_period[1].Long()) + "</td>" +
+			"<td>(Act. " + std::to_string(o["activate-at"].Long()) + ")</td></tr>";
+	}
+	rv += "</table>";
+	return rv;
+}
+
+
 WebReply *
 WebviewRCLLRefBoxRequestProcessor::process_request(const fawkes::WebRequest *request)
 {
@@ -91,7 +139,7 @@ WebviewRCLLRefBoxRequestProcessor::process_request(const fawkes::WebRequest *req
     *r += "<h2>RCLL RefBox Database Report</h2>\n";
 
     time_t query_time = time(0);
-    query_time -= 24 * 60;
+    query_time -= 30 * 60;
 
     BSONObj query = BSON("start-time" << BSONObjBuilder().appendTimeT("$gt", query_time).obj());
 
@@ -128,6 +176,10 @@ WebviewRCLLRefBoxRequestProcessor::process_request(const fawkes::WebRequest *req
 		     "<td><i>Production:</i> %ld</td></tr>\n",
 		     doc["phase-points-magenta"]["PRODUCTION"].Long());
 
+      r->append_body("<tr><td><b>Orders:</b></td>\n"
+                     "<td>%s</td></tr>\n",
+                     gen_orders_table(&doc).c_str());
+
       *r += "</table>\n";
     }
 
@@ -204,22 +256,10 @@ WebviewRCLLRefBoxRequestProcessor::process_request(const fawkes::WebRequest *req
       *r += "</table></td></tr>\n";
 
       if (doc.hasField("orders")) {
-	r->append_body("<tr id=\"game-%s-orders\">"
-		       "<td valign=\"top\"><div style=\"margin-top: 12px\">Orders</div></td>"
-		       "<td colspan=\"6\"><table>"
-		       "<tr><th>ID</th><th>Team</th><th>Product</th>"
-		       "<th>Requested</th><th>Delivered</th><th>Period</th></tr>\n",
-		       doc["_id"].OID().str().c_str());
-	std::vector<BSONElement> orders = doc["orders"].Array();
-	for (const BSONElement &o : orders) {
-	  std::vector<BSONElement> del_period = o["delivery-period"].Array();
-	  r->append_body("<tr><td>%lu</td><td>%s</td><td>%s</td>"
-			 "<td>%lu</td><td>%lu</td><td>%lu-%lu (Act. %lu)</td></tr>",
-			 o["id"].Long(), o["team"].String().c_str(), o["product"].String().c_str(),
-			 o["quantity-requested"].Long(), o["quantity-delivered"].Long(),
-			 del_period[0].Long(), del_period[1].Long(), o["activate-at"].Long());
-	}
-	*r += "</table></td></tr>\n";
+	      r->append_body("<tr id=\"game-%s-orders\">"
+	                     "<td valign=\"top\"><div style=\"margin-top: 12px\">Orders</div></td>"
+	                     "<td colspan=\"6\">%s</td></tr>\n",
+	                     doc["_id"].OID().str().c_str(), gen_orders_table(&doc).c_str());
       }
 
       if (doc.hasField("machines")) {
diff --git a/src/plugins/webview-refbox/webview-refbox-processor.h b/src/plugins/webview-refbox/webview-refbox-processor.h
index e325956..ed0a81a 100644
--- a/src/plugins/webview-refbox/webview-refbox-processor.h
+++ b/src/plugins/webview-refbox/webview-refbox-processor.h
@@ -30,6 +30,7 @@
 
 namespace mongo {
   class DBClientBase;
+  class BSONObj;
 }
 
 class WebviewRCLLRefBoxRequestProcessor : public fawkes::WebRequestProcessor
@@ -41,8 +42,9 @@ class WebviewRCLLRefBoxRequestProcessor : public fawkes::WebRequestProcessor
   virtual fawkes::WebReply * process_request(const fawkes::WebRequest *request);
 
  private:
+  std::string gen_orders_table(const mongo::BSONObj *doc);
 
- private:
+	private:
   mongo::DBClientBase *mongodb_;
 
   std::string           baseurl_;
-- 
1.9.3


From 6addb910f2cb728b905c7c3622961f13aba50baf Mon Sep 17 00:00:00 2001
From: Frederik Zwilling <zwilling@kbsg.rwth-aachen.de>
Date: Wed, 1 Jun 2016 09:22:38 +0200
Subject: [PATCH 7/7] webview-refbox: use numberLong to avoid error reading
 game_reports

---
 .../webview-refbox/webview-refbox-processor.cpp    | 29 +++++++++++-----------
 1 file changed, 15 insertions(+), 14 deletions(-)

diff --git a/src/plugins/webview-refbox/webview-refbox-processor.cpp b/src/plugins/webview-refbox/webview-refbox-processor.cpp
index 4f7384c..67d18a3 100644
--- a/src/plugins/webview-refbox/webview-refbox-processor.cpp
+++ b/src/plugins/webview-refbox/webview-refbox-processor.cpp
@@ -139,9 +139,10 @@ WebviewRCLLRefBoxRequestProcessor::process_request(const fawkes::WebRequest *req
     *r += "<h2>RCLL RefBox Database Report</h2>\n";
 
     time_t query_time = time(0);
-    query_time -= 30 * 60;
+    query_time -= 24 * 3600;
 
-    BSONObj query = BSON("start-time" << BSONObjBuilder().appendTimeT("$gt", query_time).obj());
+    BSONObj query = BSON("start-time" << BSONObjBuilder().appendTimeT("$gt", query_time).obj() <<
+                         "end-time" << BSON("$exists" << false));
 
     // check if there is a running game
     std::shared_ptr<DBClientCursor> cursor =
@@ -164,17 +165,17 @@ WebviewRCLLRefBoxRequestProcessor::process_request(const fawkes::WebRequest *req
 
       r->append_body("<tr><td><b>Points Cyan:</b></td>\n"
 		     "<td><i>Exploration:</i> %ld</td></tr>\n",
-		     doc["phase-points-cyan"]["EXPLORATION"].Long());
+		     doc["phase-points-cyan"]["EXPLORATION"].numberLong());
       r->append_body("<tr><td></td>\n"
 		     "<td><i>Production:</i> %ld</td></tr>\n",
-		     doc["phase-points-cyan"]["PRODUCTION"].Long());
+		     doc["phase-points-cyan"]["PRODUCTION"].numberLong());
 
       r->append_body("<tr><td><b>Points Magenta:</b></td>\n"
 		     "<td><i>Exploration:</i> %ld</td></tr>\n",
-		     doc["phase-points-magenta"]["EXPLORATION"].Long());
+		     doc["phase-points-magenta"]["EXPLORATION"].numberLong());
       r->append_body("<tr><td></td>\n"
 		     "<td><i>Production:</i> %ld</td></tr>\n",
-		     doc["phase-points-magenta"]["PRODUCTION"].Long());
+		     doc["phase-points-magenta"]["PRODUCTION"].numberLong());
 
       r->append_body("<tr><td><b>Orders:</b></td>\n"
                      "<td>%s</td></tr>\n",
@@ -202,9 +203,9 @@ WebviewRCLLRefBoxRequestProcessor::process_request(const fawkes::WebRequest *req
       std::vector<BSONElement> points = doc["total-points"].Array();
 
       int winner_team = -1;
-      if (points[0].Long() > points[1].Long()) {
+      if (points[0].numberLong() > points[1].numberLong()) {
 	winner_team = 0;
-      } else if (points[1].Long() > points[0].Long()) {
+      } else if (points[1].numberLong() > points[0].numberLong()) {
 	winner_team = 1;
       } // else draw
 
@@ -219,17 +220,17 @@ WebviewRCLLRefBoxRequestProcessor::process_request(const fawkes::WebRequest *req
 
       r->append_body("<td style=\"background-color: #88ffff; text-align: center;\">%u</td>"
 		     "<td style=\"background-color: #ff88ff; text-align: center;\">%u</td>\n",
-		     points[0].Long(), points[1].Long());
+		     points[0].numberLong(), points[1].numberLong());
 
       r->append_body("<td><i>Exploration:</i> %ld</td>\n",
-		     doc["phase-points-cyan"]["EXPLORATION"].Long());
+		     doc["phase-points-cyan"]["EXPLORATION"].numberLong());
       r->append_body("<td><i>Production:</i> %ld</td>\n",
-		     doc["phase-points-cyan"]["PRODUCTION"].Long());
+		     doc["phase-points-cyan"]["PRODUCTION"].numberLong());
 
       r->append_body("<td><i>Exploration:</i> %ld</td>\n",
-		     doc["phase-points-magenta"]["EXPLORATION"].Long());
+		     doc["phase-points-magenta"]["EXPLORATION"].numberLong());
       r->append_body("<td><i>Production:</i> %ld</td>\n",
-		     doc["phase-points-magenta"]["PRODUCTION"].Long());
+		     doc["phase-points-magenta"]["PRODUCTION"].numberLong());
 
       *r += "</tr>\n";
 
@@ -250,7 +251,7 @@ WebviewRCLLRefBoxRequestProcessor::process_request(const fawkes::WebRequest *req
       for (const BSONElement &pd : pointinfo) {
 	r->append_body("<tr><td style=\"background-color: #%s\">%s</td><td>%lu</td><td>%.2f</td><td>%s</td></tr>\n",
 		       pd["team"].String() == "CYAN" ? "88ffff" : "ff88ff",
-		       pd["team"].String().c_str(), pd["points"].Long(),
+		       pd["team"].String().c_str(), pd["points"].numberLong(),
 		       pd["game-time"].Double(), pd["reason"].String().c_str());
       }
       *r += "</table></td></tr>\n";
-- 
1.9.3

