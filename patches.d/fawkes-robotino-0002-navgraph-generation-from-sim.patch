diff --git a/cfg/conf.d/gazsim.yaml b/cfg/conf.d/gazsim.yaml
index 5c9e132..6fe0255 100644
--- a/cfg/conf.d/gazsim.yaml
+++ b/cfg/conf.d/gazsim.yaml
@@ -164,4 +164,9 @@ gazsim:
     info-if-name: "/tag-vision/info"
     number-interfaces: 16
     visibility-history-increase-per-update: 30
-    frame: !frame gazsim_tag_vision
\ No newline at end of file
+    frame: !frame gazsim_tag_vision
+
+  navgraph-generator:
+    all-active-tags: ["~/tag_65/gazsim/gps/","~/tag_01/gazsim/gps/","~/tag_17/gazsim/gps/","~/tag_33/gazsim/gps/","~/tag_177/gazsim/gps/","~/tag_81/gazsim/gps/","~/tag_161/gazsim/gps/","~/tag_97/gazsim/gps/","~/tag_113/gazsim/gps/","~/tag_129/gazsim/gps/","~/tag_145/gazsim/gps/","~/tag_49/gazsim/gps/"]
+    related-mps: ["C-BS","C-CS1","C-CS2","C-RS1","C-RS2","C-DS","M-BS","M-CS1","M-CS2","M-RS1","M-RS2","M-DS"]
+    nav-gen-if-name: "/navgraph-generator-mps"
diff --git a/etc/scripts/gazsim-startup.bash b/etc/scripts/gazsim-startup.bash
index 16b5021..cdd9a9a 100755
--- a/etc/scripts/gazsim-startup.bash
+++ b/etc/scripts/gazsim-startup.bash
@@ -28,6 +28,7 @@ OPTIONS:
                   ($FAWKES_DIR/bin by default)
    -g             Run Fawkes in gdb
    -v             Run Fawkes in valgrind
+   -t             Skip Exploration and add all navgraph points
   GAZEBO:
    -e arg         Record Replay
 EOF
@@ -48,7 +49,9 @@ AGENT=
 FAWKES_BIN=$FAWKES_DIR/bin
 KEEP=
 GDB=
-while getopts “hx:c:lrm:sp:i:f:e:da4kgv” OPTION
+SKIP_EXPLORATION=
+
+while getopts “hx:c:lrm:sp:i:f:e:da4kgvt” OPTION
 do
      case $OPTION in
          h)
@@ -102,6 +105,9 @@ do
          m)
              META_PLUGIN=,$OPTARG
              ;;
+	 t)
+	     SKIP_EXPLORATION=",gazsim-navgraph-generator"
+	     ;;
 	 f)
 	     FAWKES_BIN=$OPTARG
 	     ;;
@@ -148,7 +154,7 @@ case $COMMAND in
     fawkes )
 	# ulimit -c unlimited
 	export ROS_MASTER_URI=http://localhost:$PORT
-	robotino_plugins=gazsim-meta-robotino$ROS$VISION$AGENT$META_PLUGIN
+	robotino_plugins=gazsim-meta-robotino$ROS$VISION$AGENT$META_PLUGIN$SKIP_EXPLORATION
 	$GDB $FAWKES_BIN/fawkes -c $CONF/$ROBOTINO.yaml -p $robotino_plugins
 	if [ -n "$GDB" ]; then
 		echo Fawkes exited, press return to close shell
diff --git a/etc/scripts/gazsim.bash b/etc/scripts/gazsim.bash
index e5b4042..463b810 100755
--- a/etc/scripts/gazsim.bash
+++ b/etc/scripts/gazsim.bash
@@ -30,13 +30,14 @@ OPTIONS:
                   ($FAWKES_DIR/bin by default)
    -g             Run Fawkes in gdb
    -v             Run Fawkes in valgrind
+   -t             Skip Exploration and add all navgraph points
 EOF
 }
 
  
 #check options
 
-COMMAND=
+COMMAND=start
 CONF=
 VISUALIZATION=
 ROS=
@@ -52,8 +53,9 @@ META_PLUGIN=
 START_GAZEBO=true
 TERM_GEOMETRY=105x56
 GDB=
+SKIP_EXPLORATION=
 
-while getopts “hx:c:lrksn:e:dm:aof:p:gv” OPTION
+while getopts “hx:c:lrksn:e:dm:aof:p:gvt” OPTION
 do
      case $OPTION in
          h)
@@ -123,6 +125,9 @@ do
 	 f)
 	     FIRST_ROBOTINO_NUMBER=$OPTARG
 	     ;;
+	 t)
+	     SKIP_EXPLORATION="-t"
+	     ;;
 	 p)
 	     FAWKES_BIN=$OPTARG/bin
 	     ;;
@@ -217,7 +222,7 @@ if [  $COMMAND  == start ]; then
     #start fawkes for robotinos
     for ((ROBO=$FIRST_ROBOTINO_NUMBER ; ROBO<$(($FIRST_ROBOTINO_NUMBER+$NUM_ROBOTINOS)) ;ROBO++))
     do
-	OPEN_COMMAND="$OPEN_COMMAND --tab -e 'bash -c \"export TAB_START_TIME=$(date +%s); $script_path/wait-at-first-start.bash 10; $startup_script_location -x fawkes -p 1131$ROBO -i robotino$ROBO $KEEP $CONF $ROS $GDB $META_PLUGIN $DETAILED -f $FAWKES_BIN\"'"
+	OPEN_COMMAND="$OPEN_COMMAND --tab -e 'bash -c \"export TAB_START_TIME=$(date +%s); $script_path/wait-at-first-start.bash 10; $startup_script_location -x fawkes -p 1131$ROBO -i robotino$ROBO $KEEP $CONF $ROS $GDB $META_PLUGIN $DETAILED -f $FAWKES_BIN $SKIP_EXPLORATION\"'"
     done
 
     if $START_GAZEBO
diff --git a/src/plugins/gazebo/Makefile b/src/plugins/gazebo/Makefile
index a53765f..314a6a6 100644
--- a/src/plugins/gazebo/Makefile
+++ b/src/plugins/gazebo/Makefile
@@ -19,6 +19,7 @@ include $(BASEDIR)/etc/buildsys/config.mk
 SUBDIRS	= gazsim-light-front gazsim-llsfrbcomm gazsim-puck-detection \
 	  gazsim-llsf-control gazsim-llsf-statistics \
 	  gazsim-machine-signal gazsim-gripper \
-	  gazsim-conveyor gazsim-tag-vision
+	  gazsim-conveyor gazsim-tag-vision \
+	  gazsim-navgraph-generator
 
 include $(BUILDSYSDIR)/rules.mk
diff --git a/src/plugins/gazebo/gazsim-navgraph-generator/Makefile b/src/plugins/gazebo/gazsim-navgraph-generator/Makefile
new file mode 100644
index 0000000..3639b4f
--- /dev/null
+++ b/src/plugins/gazebo/gazsim-navgraph-generator/Makefile
@@ -0,0 +1,51 @@
+#*****************************************************************************
+#               Makefile Build System for Fawkes: Gazsim Navgraph Generator Plugin
+#
+#   Created on Mon Feb 15 11:40:00 2016
+#   Copyright (C) 2016 by David Schmidt
+#
+##*****************************************************************************
+#
+#   This program is free software; you can redistribute it and/or modify
+#   it under the terms of the GNU General Public License as published by
+#   the Free Software Foundation; either version 2 of the License, or
+#   (at your option) any later version.
+#
+#*****************************************************************************
+
+BASEDIR = ../../../..
+
+include $(BASEDIR)/etc/buildsys/config.mk
+include $(BUILDCONFDIR)/tf/tf.mk
+include $(BASEDIR)/fawkes/src/plugins/gazebo/gazebo.mk
+include $(BUILDSYSDIR)/protobuf.mk
+
+LIBS_gazsim_navgraph_generator = fawkescore fawkesutils fawkesaspects fvutils \
+	       fawkestf fawkesinterface fawkesblackboard \
+	       Position3DInterface fawkesgazeboaspect \
+	       TransformInterface SwitchInterface \
+	       RobotinoLightInterface llsf_msgs
+OBJS_gazsim_navgraph_generator = gazsim_navgraph_generator_plugin.o gazsim_navgraph_generator_thread.o
+
+OBJS_all    = $(OBJS_gazsim_navgraph_generator)
+
+ifeq ($(HAVE_GAZEBO)$(HAVE_PROTOBUF)$(HAVE_TF),111)
+  CFLAGS  += $(CFLAGS_TF)
+  LDFLAGS += $(LDFLAGS_TF)
+  CFLAGS  += $(CFLAGS_GAZEBO) $(CFLAGS_PROTOBUF)
+  LDFLAGS += $(LDFLAGS_GAZEBO) $(LDFLAGS_PROTOBUF) -lm $(call boost-lbis-ldflags,system) -lboost_system
+
+  PLUGINS_all = $(PLUGINDIR)/gazsim-navgraph-generator.$(SOEXT)
+else
+  WARN_TARGETS += warning_tf
+endif
+
+ifeq ($(OBJSSUBMAKE),1)
+all: $(WARN_TARGETS)
+.PHONY: warning_tf warning_ros warning_geometry_msgs
+warning_tf:
+	$(SILENT)echo -e "$(INDENT_PRINT)--> $(TRED)Omitting gazsim-navgraph-generator libs" \
+                         "$(TNORMAL) (tf not available)"
+endif
+
+include $(BUILDSYSDIR)/base.mk
diff --git a/src/plugins/gazebo/gazsim-navgraph-generator/gazsim_navgraph_generator_plugin.cpp b/src/plugins/gazebo/gazsim-navgraph-generator/gazsim_navgraph_generator_plugin.cpp
new file mode 100644
index 0000000..4f02970
--- /dev/null
+++ b/src/plugins/gazebo/gazsim-navgraph-generator/gazsim_navgraph_generator_plugin.cpp
@@ -0,0 +1,43 @@
+/***************************************************************************
+ *  gazsim_navgraph_generator_plugin.cpp - Generates navgraph without exploration
+ *
+ *  Created: Mon Feb 15 11:25:00 2016
+ *  Copyright  2016  David Schmidt
+ ****************************************************************************/
+
+/*  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2 of the License, or
+ *  (at your option) any later version.
+ *
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU Library General Public License for more details.
+ *
+ *  Read the full text in the LICENSE.GPL file in the doc directory.
+ */
+
+#include <core/plugin.h>
+
+#include "gazsim_navgraph_generator_thread.h"
+
+using namespace fawkes;
+
+/** Plugin to generate navgraph without exploration phase in simulation
+ * @author David Schmidt
+ */
+class GazsimNavgraphGeneratorPlugin: public fawkes::Plugin {
+public:
+	/** Constructor.
+	 * @param config Fawkes configuration
+	 */
+	GazsimNavgraphGeneratorPlugin(Configuration *config) :
+			Plugin(config) {
+		thread_list.push_back(new GazsimNavgraphGeneratorThread());
+	}
+};
+
+PLUGIN_DESCRIPTION(
+        "Gazsim Navgraph Generator Plugin for generating navgraph without exploration phase")
+EXPORT_PLUGIN(GazsimNavgraphGeneratorPlugin)
diff --git a/src/plugins/gazebo/gazsim-navgraph-generator/gazsim_navgraph_generator_thread.cpp b/src/plugins/gazebo/gazsim-navgraph-generator/gazsim_navgraph_generator_thread.cpp
new file mode 100644
index 0000000..7a8684d
--- /dev/null
+++ b/src/plugins/gazebo/gazsim-navgraph-generator/gazsim_navgraph_generator_thread.cpp
@@ -0,0 +1,173 @@
+/***************************************************************************
+ *	gazsim_navgraph_generator_thread.cpp - Thread for generating navgraph without exploration phase
+ *
+ *	Created: Mon Feb 15 11:31:11 2016
+ *	Copyright	2016	David Schmidt
+ ****************************************************************************/
+
+/*	This program is free software; you can redistribute it and/or modify
+ *	it under the terms of the GNU General Public License as published by
+ *	the Free Software Foundation; either version 2 of the License, or
+ *	(at your option) any later version.
+ *
+ *	This program is distributed in the hope that it will be useful,
+ *	but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	See the
+ *	GNU Library General Public License for more details.
+ *
+ *	Read the full text in the LICENSE.GPL file in the doc directory.
+ */
+
+#include <string>
+#include <unordered_map>
+#include <interfaces/NavGraphWithMPSGeneratorInterface.h>
+
+#include "gazsim_navgraph_generator_thread.h"
+
+using namespace fawkes;
+
+/** @class GazsimNavgraphGeneratorThread "gazsim-navgraph-generator_thread.h"
+ * Thread for generating navgraph without exploration phase.
+ * @author David Schmidt
+ */
+
+/** Constructor. */
+GazsimNavgraphGeneratorThread::GazsimNavgraphGeneratorThread() :
+		Thread("GazsimNavgraphGeneratorThread", Thread::OPMODE_WAITFORWAKEUP),
+		BlockedTimingAspect(BlockedTimingAspect::WAKEUP_HOOK_WORLDSTATE),
+		task_finished_(false), computation_is_running_(false) {
+}
+
+void GazsimNavgraphGeneratorThread::init() {
+	logger->log_debug(name(), "Initializing GazsimNavgraphGenerator Plugin");
+
+	//read config values
+	tags_ = config->get_strings("/gazsim/navgraph-generator/all-active-tags");
+	related_mps_ = config->get_strings(
+	        "/gazsim/navgraph-generator/related-mps");
+	nav_gen_if_name_ = config->get_string(
+	        "/gazsim/navgraph-generator/nav-gen-if-name");
+
+	//open interfaces
+	nav_gen_if_ = blackboard
+	        ->open_for_reading<fawkes::NavGraphWithMPSGeneratorInterface>(
+	        nav_gen_if_name_.data());
+
+	//subscribing to gazebo tag messages
+	for (unsigned i = 0; i < tags_.size(); ++i)
+		subscriber_tags_.push_back(
+		        gazebo_world_node->Subscribe(
+		                tags_[i], &GazsimNavgraphGeneratorThread::on_tag_msg,
+		                this));
+	tag_msgs_.clear();
+
+	//sort the mpsIDs to the tagIDs in mps_id_
+	get_mpsID_by_tagID();
+}
+
+void GazsimNavgraphGeneratorThread::finalize() {
+}
+
+void GazsimNavgraphGeneratorThread::loop() {
+	//check if navgraph is already computed
+	if (task_finished_)
+		return;
+	//check if computation of navgraph is running
+	if (computation_is_running_) {
+		nav_gen_if_->read();
+		if (nav_gen_if_->is_final()) {
+			task_finished_ = true;
+			computation_is_running_ = false;
+			blackboard->close(nav_gen_if_);
+			logger->log_info(name(), "Navgraph is generated!");
+		}
+		return;
+	}
+	//check if all tag-messages were received
+	if (tag_msgs_.size() < tags_.size())
+		return;
+
+	//check if the transform map nedded by navgraph-generator exists otherwise wait
+	if(!tf_listener->frame_exists("map")){
+    logger->log_debug(name(), "Waiting until frame map exists");
+    return;
+  }
+	
+	//send the position of all tags
+	for (std::map<int, gazebo::msgs::Pose>::iterator it = tag_msgs_.begin();
+	        it != tag_msgs_.end(); ++it) {
+//		logger->log_info(name(), "tag %i gets sent to NavgraphGenerator.",
+//		                 (*it).first);
+		send_station_msg((*it).first, (*it).second);
+	}
+	bool* allFalse = new bool[24];
+	for (int i = 0; i < 24; ++i)
+		allFalse[i] = false;
+	NavGraphWithMPSGeneratorInterface::SetExplorationZonesMessage* delete_explo_navgraph_msg =
+	        new NavGraphWithMPSGeneratorInterface::SetExplorationZonesMessage(
+	                allFalse);
+	//delete_explo_navgraph_msg->set_zones(allFalse);
+	nav_gen_if_->msgq_enqueue(delete_explo_navgraph_msg);
+	compute_msg_ = new NavGraphWithMPSGeneratorInterface::ComputeMessage();
+	nav_gen_if_->msgq_enqueue(compute_msg_);
+	computation_is_running_ = true;
+
+	logger->log_info(name(), "Start unsubscribing!");
+	while (!subscriber_tags_.empty()) {
+		//subscriber_tags_.back()->Unsubscribe();
+		//gazebo 4.x seems to unsubscribe by deleting pointer on next line
+		subscriber_tags_.pop_back();
+	}
+	logger->log_info(name(), "Finished unsubscribing!");
+}
+
+void GazsimNavgraphGeneratorThread::on_tag_msg(ConstPosePtr &msg) {
+	int underscore = msg->name().find('_');
+	int id = std::atoi(msg->name().substr(underscore + 1).data());
+	if (msg->position().x() > -1 && msg->position().x() < 1
+	    && msg->position().y() < 0)
+		return;
+	tag_msgs_[id].CopyFrom(*msg);
+}
+
+void GazsimNavgraphGeneratorThread::get_mpsID_by_tagID() {
+	if (tags_.size() != related_mps_.size()) {
+		logger->log_error(name(),
+		                  "There are %i tags defined, but %i!=%i related mps!",
+		                  tags_.size(), related_mps_.size(), tags_.size());
+		return;
+	}
+	for (unsigned i = 0; i < tags_.size(); ++i) {
+		int underscore = tags_[i].find('_');
+		int slash = tags_[i].substr(underscore + 1).find('/');
+		int id = std::atoi(tags_[i].substr(underscore + 1, slash).data());
+		mps_id_[id] = related_mps_[i];
+//		logger->log_info(name(), "Full tag name:  %s", tags_[i].data());
+//		logger->log_info(name(), "Extracted id:   %i", id);
+//		logger->log_info(name(), "Related MPS-ID: %s", mps_id_[id].data());
+	}
+}
+
+void GazsimNavgraphGeneratorThread::send_station_msg(int id,
+                                                     gazebo::msgs::Pose pose) {
+	NavGraphWithMPSGeneratorInterface::UpdateStationByTagMessage* stationMsg =
+	        new NavGraphWithMPSGeneratorInterface::UpdateStationByTagMessage();
+	stationMsg->set_id(mps_id_[id].data());
+	stationMsg->set_side(NavGraphWithMPSGeneratorInterface::Side::INPUT);
+	stationMsg->set_frame("map");
+	stationMsg->set_tag_translation(0, pose.position().x());
+	stationMsg->set_tag_translation(1, pose.position().y());
+	stationMsg->set_tag_translation(2, pose.position().z());
+	stationMsg->set_tag_rotation(0, pose.orientation().x());
+	stationMsg->set_tag_rotation(1, pose.orientation().y());
+	stationMsg->set_tag_rotation(2, pose.orientation().z());
+	stationMsg->set_tag_rotation(3, pose.orientation().w());
+	/*
+	 double tag_orientation=fawkes::tf::get_yaw(pose);
+	 logger->log_info(name(),"ID:%i",id);
+	 logger->log_info(name(),"Name:%s",mps_id_[id].data());
+	 logger->log_info(name(),"Position:%f,%f,%f",pose.position().x(),pose.position().y(),pose.position().z());
+	 logger->log_info(name(),"Rotation:%f",tag_orientation);
+	 */
+	nav_gen_if_->msgq_enqueue(stationMsg);
+}
diff --git a/src/plugins/gazebo/gazsim-navgraph-generator/gazsim_navgraph_generator_thread.h b/src/plugins/gazebo/gazsim-navgraph-generator/gazsim_navgraph_generator_thread.h
new file mode 100644
index 0000000..2d7d0ae
--- /dev/null
+++ b/src/plugins/gazebo/gazsim-navgraph-generator/gazsim_navgraph_generator_thread.h
@@ -0,0 +1,80 @@
+/***************************************************************************
+ *	gazsim_navgraph_generator_thread.h - Thread for generating the navgraph without exploration phase
+ *
+ *	Created: Mon Feb 15 11:27:09 2016
+ *	Copyright	2016	David Schmidt
+ ****************************************************************************/
+
+/*	This program is free software; you can redistribute it and/or modify
+ *	it under the terms of the GNU General Public License as published by
+ *	the Free Software Foundation; either version 2 of the License, or
+ *	(at your option) any later version.
+ *
+ *	This program is distributed in the hope that it will be useful,
+ *	but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	See the
+ *	GNU Library General Public License for more details.
+ *
+ *	Read the full text in the LICENSE.GPL file in the doc directory.
+ */
+
+#ifndef __PLUGINS_GAZSIM_NAVGRAPH_GENERATOR_THREAD_H_
+#define __PLUGINS_GAZSIM_NAVGRAPH_GENERATOR_THREAD_H_
+
+#include <core/threading/thread.h>
+//#include <aspect/clock.h>
+#include <aspect/configurable.h>
+#include <aspect/logging.h>
+#include <aspect/blackboard.h>
+#include <aspect/blocked_timing.h>
+#include <interfaces/NavGraphWithMPSGeneratorInterface.h>
+#include <aspect/tf.h>
+
+//gazebo headers
+#include <plugins/gazebo/aspect/gazebo.h>
+
+class GazsimNavgraphGeneratorThread:
+        public fawkes::Thread,
+        //public fawkes::ClockAspect,
+        public fawkes::LoggingAspect,
+        public fawkes::ConfigurableAspect,
+        public fawkes::BlackBoardAspect,
+	      public fawkes::BlockedTimingAspect,
+	      public fawkes::TransformAspect,
+        public fawkes::GazeboAspect {
+public:
+	GazsimNavgraphGeneratorThread();
+
+	virtual void init();
+	virtual void loop();
+	virtual void finalize();
+private:
+	//controlling flags
+	bool task_finished_;
+	bool computation_is_running_;
+	fawkes::NavGraphWithMPSGeneratorInterface::ComputeMessage* compute_msg_;
+
+	//Subscribers to receive tag positions from gazebo
+	std::vector<std::string> tags_;
+	std::vector<std::string> related_mps_;
+	std::vector<gazebo::transport::SubscriberPtr> subscriber_tags_;
+
+	//navgraph generator interface
+	std::string nav_gen_if_name_;
+	fawkes::NavGraphWithMPSGeneratorInterface *nav_gen_if_;
+
+	//list of poses of the tags
+	std::map<int, gazebo::msgs::Pose> tag_msgs_;
+
+	//handler function for incoming messages about the tag positions
+	void on_tag_msg(ConstPosePtr &msg);
+
+	//extract mpsID ordered by tagID
+	std::map<int, std::string> mps_id_;
+	void get_mpsID_by_tagID();
+
+	//send station msg with pose information to navgraph generator
+	void send_station_msg(int id, gazebo::msgs::Pose pose);
+};
+
+#endif
