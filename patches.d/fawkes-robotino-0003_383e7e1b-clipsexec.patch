diff --git a/src/clips-specs/hackathon/state-estimation-init.clp b/src/clips-specs/hackathon/state-estimation-init.clp
index 5f990ac1..893ec521 100644
--- a/src/clips-specs/hackathon/state-estimation-init.clp
+++ b/src/clips-specs/hackathon/state-estimation-init.clp
@@ -14,3 +14,13 @@
   =>
   (blackboard-open-reading "Position3DInterface" "Pose")
 )
+
+(defrule state-estimation-open-shelf-configuration-interface
+  "Open the ShelfConfiguration blackboard interface to get the goal
+   configuration."
+  (executive-init)
+  (ff-feature-loaded blackboard)
+  (not (blackboard-interface (type "ShelfConfigurationInterface") (id "shelf")))
+  =>
+  (blackboard-open-reading "ShelfConfigurationInterface" "shelf")
+)
diff --git a/src/libs/interfaces/ShelfConfigurationInterface.cpp b/src/libs/interfaces/ShelfConfigurationInterface.cpp
new file mode 100644
index 00000000..93e9bf41
--- /dev/null
+++ b/src/libs/interfaces/ShelfConfigurationInterface.cpp
@@ -0,0 +1,273 @@
+
+/***************************************************************************
+ *  ShelfConfigurationInterface.cpp - Fawkes BlackBoard Interface - ShelfConfigurationInterface
+ *
+ *  Templated created:   Thu Oct 12 10:49:19 2006
+ *  Copyright  2017  Till Hofmann
+ *
+ ****************************************************************************/
+
+/*  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2 of the License, or
+ *  (at your option) any later version. A runtime exception applies to
+ *  this software (see LICENSE.GPL_WRE file mentioned below for details).
+ *
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU Library General Public License for more details.
+ *
+ *  Read the full text in the LICENSE.GPL_WRE file in the doc directory.
+ */
+
+#include <interfaces/ShelfConfigurationInterface.h>
+
+#include <core/exceptions/software.h>
+
+#include <map>
+#include <string>
+#include <cstring>
+#include <cstdlib>
+
+namespace fawkes {
+
+/** @class ShelfConfigurationInterface <interfaces/ShelfConfigurationInterface.h>
+ * ShelfConfigurationInterface Fawkes BlackBoard Interface.
+ * 
+     A configuration of a shelf, determines the color of each of its three
+     slots.
+    
+ * @ingroup FawkesInterfaces
+ */
+
+
+
+/** Constructor */
+ShelfConfigurationInterface::ShelfConfigurationInterface() : Interface()
+{
+  data_size = sizeof(ShelfConfigurationInterface_data_t);
+  data_ptr  = malloc(data_size);
+  data      = (ShelfConfigurationInterface_data_t *)data_ptr;
+  data_ts   = (interface_data_ts_t *)data_ptr;
+  memset(data_ptr, 0, data_size);
+  enum_map_SlotColor[(int)RED] = "RED";
+  enum_map_SlotColor[(int)BLACK] = "BLACK";
+  enum_map_SlotColor[(int)EMPTY] = "EMPTY";
+  add_fieldinfo(IFT_ENUM, "left", 1, &data->left, "SlotColor", &enum_map_SlotColor);
+  add_fieldinfo(IFT_ENUM, "center", 1, &data->center, "SlotColor", &enum_map_SlotColor);
+  add_fieldinfo(IFT_ENUM, "right", 1, &data->right, "SlotColor", &enum_map_SlotColor);
+  add_fieldinfo(IFT_BOOL, "ready", 1, &data->ready);
+  unsigned char tmp_hash[] = {0x3d, 0x19, 0x1c, 0x59, 0xa2, 0xc2, 0x6b, 0xda, 0x40, 0xf, 0x82, 0x71, 0x17, 0x93, 0xef, 0x7d};
+  set_hash(tmp_hash);
+}
+
+/** Destructor */
+ShelfConfigurationInterface::~ShelfConfigurationInterface()
+{
+  free(data_ptr);
+}
+/** Convert SlotColor constant to string.
+ * @param value value to convert to string
+ * @return constant value as string.
+ */
+const char *
+ShelfConfigurationInterface::tostring_SlotColor(SlotColor value) const
+{
+  switch (value) {
+  case RED: return "RED";
+  case BLACK: return "BLACK";
+  case EMPTY: return "EMPTY";
+  default: return "UNKNOWN";
+  }
+}
+/* Methods */
+/** Get left value.
+ * 
+    The color of the left slot.
+  
+ * @return left value
+ */
+ShelfConfigurationInterface::SlotColor
+ShelfConfigurationInterface::left() const
+{
+  return (ShelfConfigurationInterface::SlotColor)data->left;
+}
+
+/** Get maximum length of left value.
+ * @return length of left value, can be length of the array or number of 
+ * maximum number of characters for a string
+ */
+size_t
+ShelfConfigurationInterface::maxlenof_left() const
+{
+  return 1;
+}
+
+/** Set left value.
+ * 
+    The color of the left slot.
+  
+ * @param new_left new left value
+ */
+void
+ShelfConfigurationInterface::set_left(const SlotColor new_left)
+{
+  data->left = new_left;
+  data_changed = true;
+}
+
+/** Get center value.
+ * 
+    The color of the center slot.
+  
+ * @return center value
+ */
+ShelfConfigurationInterface::SlotColor
+ShelfConfigurationInterface::center() const
+{
+  return (ShelfConfigurationInterface::SlotColor)data->center;
+}
+
+/** Get maximum length of center value.
+ * @return length of center value, can be length of the array or number of 
+ * maximum number of characters for a string
+ */
+size_t
+ShelfConfigurationInterface::maxlenof_center() const
+{
+  return 1;
+}
+
+/** Set center value.
+ * 
+    The color of the center slot.
+  
+ * @param new_center new center value
+ */
+void
+ShelfConfigurationInterface::set_center(const SlotColor new_center)
+{
+  data->center = new_center;
+  data_changed = true;
+}
+
+/** Get right value.
+ * 
+    The color of the right slot.
+  
+ * @return right value
+ */
+ShelfConfigurationInterface::SlotColor
+ShelfConfigurationInterface::right() const
+{
+  return (ShelfConfigurationInterface::SlotColor)data->right;
+}
+
+/** Get maximum length of right value.
+ * @return length of right value, can be length of the array or number of 
+ * maximum number of characters for a string
+ */
+size_t
+ShelfConfigurationInterface::maxlenof_right() const
+{
+  return 1;
+}
+
+/** Set right value.
+ * 
+    The color of the right slot.
+  
+ * @param new_right new right value
+ */
+void
+ShelfConfigurationInterface::set_right(const SlotColor new_right)
+{
+  data->right = new_right;
+  data_changed = true;
+}
+
+/** Get ready value.
+ * 
+    Whether the shelf configuration is done.
+  
+ * @return ready value
+ */
+bool
+ShelfConfigurationInterface::is_ready() const
+{
+  return data->ready;
+}
+
+/** Get maximum length of ready value.
+ * @return length of ready value, can be length of the array or number of 
+ * maximum number of characters for a string
+ */
+size_t
+ShelfConfigurationInterface::maxlenof_ready() const
+{
+  return 1;
+}
+
+/** Set ready value.
+ * 
+    Whether the shelf configuration is done.
+  
+ * @param new_ready new ready value
+ */
+void
+ShelfConfigurationInterface::set_ready(const bool new_ready)
+{
+  data->ready = new_ready;
+  data_changed = true;
+}
+
+/* =========== message create =========== */
+Message *
+ShelfConfigurationInterface::create_message(const char *type) const
+{
+  throw UnknownTypeException("The given type '%s' does not match any known "
+                             "message type for this interface type.", type);
+}
+
+
+/** Copy values from other interface.
+ * @param other other interface to copy values from
+ */
+void
+ShelfConfigurationInterface::copy_values(const Interface *other)
+{
+  const ShelfConfigurationInterface *oi = dynamic_cast<const ShelfConfigurationInterface *>(other);
+  if (oi == NULL) {
+    throw TypeMismatchException("Can only copy values from interface of same type (%s vs. %s)",
+                                type(), other->type());
+  }
+  memcpy(data, oi->data, sizeof(ShelfConfigurationInterface_data_t));
+}
+
+const char *
+ShelfConfigurationInterface::enum_tostring(const char *enumtype, int val) const
+{
+  if (strcmp(enumtype, "SlotColor") == 0) {
+    return tostring_SlotColor((SlotColor)val);
+  }
+  throw UnknownTypeException("Unknown enum type %s", enumtype);
+}
+
+/* =========== messages =========== */
+/** Check if message is valid and can be enqueued.
+ * @param message Message to check
+ * @return true if the message is valid, false otherwise.
+ */
+bool
+ShelfConfigurationInterface::message_valid(const Message *message) const
+{
+  return false;
+}
+
+/// @cond INTERNALS
+EXPORT_INTERFACE(ShelfConfigurationInterface)
+/// @endcond
+
+
+} // end namespace fawkes
diff --git a/src/libs/interfaces/ShelfConfigurationInterface.h b/src/libs/interfaces/ShelfConfigurationInterface.h
new file mode 100644
index 00000000..29e9a7bb
--- /dev/null
+++ b/src/libs/interfaces/ShelfConfigurationInterface.h
@@ -0,0 +1,103 @@
+
+/***************************************************************************
+ *  ShelfConfigurationInterface.h - Fawkes BlackBoard Interface - ShelfConfigurationInterface
+ *
+ *  Templated created:   Thu Oct 12 10:49:19 2006
+ *  Copyright  2017  Till Hofmann
+ *
+ ****************************************************************************/
+
+/*  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2 of the License, or
+ *  (at your option) any later version. A runtime exception applies to
+ *  this software (see LICENSE.GPL_WRE file mentioned below for details).
+ *
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU Library General Public License for more details.
+ *
+ *  Read the full text in the LICENSE.GPL_WRE file in the doc directory.
+ */
+
+#ifndef __INTERFACES_SHELFCONFIGURATIONINTERFACE_H_
+#define __INTERFACES_SHELFCONFIGURATIONINTERFACE_H_
+
+#include <interface/interface.h>
+#include <interface/message.h>
+#include <interface/field_iterator.h>
+
+namespace fawkes {
+
+class ShelfConfigurationInterface : public Interface
+{
+ /// @cond INTERNALS
+ INTERFACE_MGMT_FRIENDS(ShelfConfigurationInterface)
+ /// @endcond
+ public:
+  /* constants */
+
+  /** 
+        Possible colors of a slot on the shelf.
+       */
+  typedef enum {
+    RED /**< red */,
+    BLACK /**< black */,
+    EMPTY /**< empty */
+  } SlotColor;
+  const char * tostring_SlotColor(SlotColor value) const;
+
+ private:
+  /** Internal data storage, do NOT modify! */
+  typedef struct __attribute__((packed)) {
+    int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
+    int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
+    int32_t left; /**< 
+    The color of the left slot.
+   */
+    int32_t center; /**< 
+    The color of the center slot.
+   */
+    int32_t right; /**< 
+    The color of the right slot.
+   */
+    bool ready; /**< 
+    Whether the shelf configuration is done.
+   */
+  } ShelfConfigurationInterface_data_t;
+
+  ShelfConfigurationInterface_data_t *data;
+
+  interface_enum_map_t enum_map_SlotColor;
+ public:
+  /* messages */
+  virtual bool message_valid(const Message *message) const;
+ private:
+  ShelfConfigurationInterface();
+  ~ShelfConfigurationInterface();
+
+ public:
+  /* Methods */
+  SlotColor left() const;
+  void set_left(const SlotColor new_left);
+  size_t maxlenof_left() const;
+  SlotColor center() const;
+  void set_center(const SlotColor new_center);
+  size_t maxlenof_center() const;
+  SlotColor right() const;
+  void set_right(const SlotColor new_right);
+  size_t maxlenof_right() const;
+  bool is_ready() const;
+  void set_ready(const bool new_ready);
+  size_t maxlenof_ready() const;
+  virtual Message * create_message(const char *type) const;
+
+  virtual void copy_values(const Interface *other);
+  virtual const char * enum_tostring(const char *enumtype, int val) const;
+
+};
+
+} // end namespace fawkes
+
+#endif
diff --git a/src/libs/interfaces/ShelfConfigurationInterface.tolua b/src/libs/interfaces/ShelfConfigurationInterface.tolua
new file mode 100644
index 00000000..d575f6bf
--- /dev/null
+++ b/src/libs/interfaces/ShelfConfigurationInterface.tolua
@@ -0,0 +1,79 @@
+$#include <interfaces/ShelfConfigurationInterface.h>
+$#include <utils/time/time.h>
+$#include <utils/time/clock.h>
+$using namespace fawkes;
+namespace fawkes {
+class ShelfConfigurationInterface : public Interface
+{
+
+  typedef enum {
+    RED,
+    BLACK,
+    EMPTY
+  } SlotColor;
+
+  SlotColor left();
+  void set_left(const SlotColor new_left);
+  int maxlenof_left() const;
+  SlotColor center();
+  void set_center(const SlotColor new_center);
+  int maxlenof_center() const;
+  SlotColor right();
+  void set_right(const SlotColor new_right);
+  int maxlenof_right() const;
+  bool is_ready();
+  void set_ready(const bool new_ready);
+  int maxlenof_ready() const;
+  bool                    oftype(const char *interface_type) const;
+  const void *            datachunk() const;
+  unsigned int            datasize() const;
+  const char *            type() const;
+  const char *            id() const;
+  const char *            uid() const;
+  unsigned int            serial() const;
+  unsigned int            mem_serial() const;
+  bool                    operator== (Interface &comp) const;
+  const unsigned char *   hash() const;
+  int                     hash_size() const;
+  const char *            hash_printable() const;
+  bool                    is_writer() const;
+  void                    set_from_chunk(void *chunk);
+  virtual fawkes::Message *  create_message @ create_message_generic(const char *type) const;
+  void          read();
+  void          write();
+  bool          has_writer() const;
+  unsigned int  num_readers() const;
+  bool          changed() const;
+  const fawkes::Time *  timestamp() const;
+  void          set_auto_timestamping(bool enabled);
+  void          set_timestamp(const fawkes::Time *t);
+  void          set_clock(fawkes::Clock *clock);
+  unsigned int  msgq_enqueue_copy(Message *message);
+  void          msgq_remove(Message *message);
+  void          msgq_remove(unsigned int message_id);
+  unsigned int  msgq_size();
+  void          msgq_flush();
+  void          msgq_lock();
+  bool          msgq_try_lock();
+  void          msgq_unlock();
+  void          msgq_pop();
+  fawkes::Message * msgq_first @ msgq_first_generic();
+  bool          msgq_empty();
+
+
+};
+
+
+$[
+
+assert(fawkes.Interface.msgq_first)
+assert(fawkes.Interface.msgq_enqueue)
+assert(fawkes.Interface.create_message)
+
+fawkes.ShelfConfigurationInterface.msgq_first     = fawkes.Interface.msgq_first
+fawkes.ShelfConfigurationInterface.msgq_enqueue   = fawkes.Interface.msgq_enqueue
+fawkes.ShelfConfigurationInterface.create_message = fawkes.Interface.create_message
+
+$]
+
+}
diff --git a/src/libs/interfaces/ShelfConfigurationInterface.xml b/src/libs/interfaces/ShelfConfigurationInterface.xml
new file mode 100644
index 00000000..b1b78f57
--- /dev/null
+++ b/src/libs/interfaces/ShelfConfigurationInterface.xml
@@ -0,0 +1,32 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE interface SYSTEM "interface.dtd">
+<interface name="ShelfConfiguration" author="Till Hofmann" year="2017">
+  <constants>
+    <enum name="SlotColor">
+      <comment>
+        Possible colors of a slot on the shelf.
+      </comment>
+      <item name="RED">red</item>
+      <item name="BLACK">black</item>
+      <item name="EMPTY">empty</item>
+    </enum>
+  </constants>
+  <data>
+    <comment>
+     A configuration of a shelf, determines the color of each of its three
+     slots.
+    </comment>
+  <field type="SlotColor" name="left">
+    The color of the left slot.
+  </field>
+  <field type="SlotColor" name="center">
+    The color of the center slot.
+  </field>
+  <field type="SlotColor" name="right">
+    The color of the right slot.
+  </field>
+  <field type="bool" name="ready">
+    Whether the shelf configuration is done.
+  </field>
+  </data>
+</interface>
diff --git a/src/tools/Makefile b/src/tools/Makefile
index 5e6d077a..5e845a05 100644
--- a/src/tools/Makefile
+++ b/src/tools/Makefile
@@ -16,7 +16,7 @@
 BASEDIR = ../..
 include $(BASEDIR)/etc/buildsys/config.mk
 
-SUBDIRS	= gamectrl
+SUBDIRS	= gamectrl configure_shelf
 
 include $(BUILDSYSDIR)/rules.mk
 
diff --git a/src/tools/configure_shelf/Makefile b/src/tools/configure_shelf/Makefile
new file mode 100644
index 00000000..752b1fd4
--- /dev/null
+++ b/src/tools/configure_shelf/Makefile
@@ -0,0 +1,27 @@
+#*****************************************************************************
+#                      Makefile Build System for Fawkes
+#                            -------------------
+#   Created on Thu 16 Nov 2017 10:47:37 CET
+#   Copyright (C) 2017 by Till Hofmann <hofmann@kbsg.rwth-aachen.de>
+#
+#*****************************************************************************
+#
+#   This program is free software; you can redistribute it and/or modify
+#   it under the terms of the GNU General Public License as published by
+#   the Free Software Foundation; either version 2 of the License, or
+#   (at your option) any later version.
+#
+#*****************************************************************************
+
+BASEDIR = ../../..
+include $(BASEDIR)/etc/buildsys/config.mk
+
+LIBS_configure_shelf = stdc++ m fawkescore fawkesutils fawkesblackboard \
+											 fawkesnetcomm fawkesinterface ShelfConfigurationInterface
+
+OBJS_configure_shelf = configure_shelf.o
+OBJS_all = $(OBJS_configure_shelf)
+
+BINS_all += $(BINDIR)/configure_shelf
+
+include $(BUILDSYSDIR)/base.mk
diff --git a/src/tools/configure_shelf/configure_shelf.cpp b/src/tools/configure_shelf/configure_shelf.cpp
new file mode 100644
index 00000000..6c8d722d
--- /dev/null
+++ b/src/tools/configure_shelf/configure_shelf.cpp
@@ -0,0 +1,125 @@
+/***************************************************************************
+ *  configure_shelf.cpp - Set a goal shelf configuration for the Hackathon
+ *
+ *  Created: Thu 16 Nov 2017 10:42:13 CET 10:42
+ *  Copyright  2017  Till Hofmann <hofmann@kbsg.rwth-aachen.de>
+ ****************************************************************************/
+
+/*  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2 of the License, or
+ *  (at your option) any later version.
+ *
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU Library General Public License for more details.
+ *
+ *  Read the full text in the LICENSE.GPL file in the doc directory.
+ */
+
+#include <core/exception.h>
+#include <utils/system/argparser.h>
+#include <netcomm/fawkes/client.h>
+#include <blackboard/remote.h>
+#include <interfaces/ShelfConfigurationInterface.h>
+
+#include <stdio.h>
+#include <unistd.h>
+
+#include <algorithm>
+#include <string>
+
+using namespace fawkes;
+using namespace std;
+
+class
+WrongArgumentException : public Exception
+{
+ public:
+  WrongArgumentException(const char *arg) : Exception()
+  {
+    append("Wrong argument: %s", arg);
+  }
+};
+
+void
+print_usage(const char *program_name)
+{
+  printf("Usage: %s [-h] [-r host[:port]] <LEFT> <CENTER> <RIGHT>\n"
+      " -h                 This help message\n"
+      " -r host[:port]     Remote host (and optionally port) to connect to\n"
+      " LEFT|CENTER|RIGHT  One of 'RED' and 'BLACK'\n",
+      program_name);
+}
+
+ShelfConfigurationInterface::SlotColor
+string_to_slot_color(string arg)
+{
+  transform(arg.begin(), arg.end(), arg.begin(), ::tolower);
+  if (arg == "red") {
+    return ShelfConfigurationInterface::RED;
+  } else if (arg == "black") {
+    return ShelfConfigurationInterface::BLACK;
+  } else {
+    throw WrongArgumentException(arg.c_str());
+  }
+}
+
+
+int
+main(int argc, char **argv)
+{
+  ArgumentParser arg_parser(argc, argv, "hr:");
+  if (arg_parser.has_arg("h")) {
+    print_usage(argv[0]);
+    return 0;
+  }
+  FawkesNetworkClient *client = NULL;
+  BlackBoard *blackboard = NULL;
+  string host = "localhost";
+  unsigned short int port = 1921;
+  if (arg_parser.has_arg("r")) {
+    arg_parser.parse_hostport("r", host, port);
+  }
+  if (argv[optind] == NULL || argv[optind+1] == NULL || argv[optind+2] == NULL)
+  {
+    printf("Missing argument\n");
+    print_usage(argv[0]);
+    return 1;
+  }
+  ShelfConfigurationInterface::SlotColor left_color, center_color, right_color;
+  try {
+    left_color = string_to_slot_color(argv[optind]);
+    center_color = string_to_slot_color(argv[optind+1]);
+    right_color = string_to_slot_color(argv[optind+2]);
+  } catch (WrongArgumentException &e) {
+    printf("%s\n", e.what_no_backtrace());
+    print_usage(argv[0]);
+    return 1;
+  }
+
+  try {
+    client = new FawkesNetworkClient(host.c_str(), port);
+    client->connect();
+    blackboard = new RemoteBlackBoard(client);
+  } catch (Exception &e) {
+    printf("Failed to connect to remote host at %s:%u\n", host.c_str(), port);
+    return 1;
+  }
+  ShelfConfigurationInterface *shelf = NULL;
+  const char *shelf_id = "shelf";
+  try {
+    shelf = blackboard->open_for_writing<ShelfConfigurationInterface>(shelf_id);
+  } catch (Exception &e) {
+    printf("Failed to open blackboard interface %s\n", shelf_id);
+    return 1;
+  }
+  shelf->set_left(left_color);
+  shelf->set_center(center_color);
+  shelf->set_right(right_color);
+  shelf->set_ready(true);
+  shelf->write();
+  blackboard->close(shelf);
+  client->disconnect();
+}
